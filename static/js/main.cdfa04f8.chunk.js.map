{"version":3,"sources":["components/Form/Form.js","components/Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","tempreature","humidity","description","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","main","temp","sys","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAaeA,EAVF,SAACC,GACZ,OACE,uBAAMC,SAAUD,EAAME,WAAtB,UACE,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,uBAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,qDCgCSC,G,MArCC,SAACN,GACf,OACE,sBAAKO,UAAU,OAAf,UACGP,EAAMQ,MACL,oBAAGD,UAAU,WAAb,oBACS,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMQ,UAG9CR,EAAMS,SACL,oBAAGF,UAAU,WAAb,uBACY,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMS,aAGjDT,EAAMU,aACL,oBAAGH,UAAU,WAAb,2BACgB,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMU,iBAGrDV,EAAMW,UACL,oBAAGJ,UAAU,WAAb,wBACa,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMW,cAGlDX,EAAMY,aACL,oBAAGL,UAAU,WAAb,2BACgB,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMY,iBAGrDZ,EAAMa,OACL,oBAAGN,UAAU,WAAb,qBACU,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMa,gBC7BhDC,EAAU,mCA6DDC,E,4MA1DbC,MAAQ,CACNN,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGTX,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIX,EAAOS,EAAEG,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUQ,EAAEG,OAAOC,SAASZ,QAAQa,MAH/B,SAIOC,MAAM,oDAAD,OAC+Bf,EAD/B,eAC0CC,EAD1C,kBAC2DK,IALvE,cAILU,EAJK,gBAQQA,EAAIC,OARZ,OAQLC,EARK,OASXC,QAAQC,IAAIF,GACRlB,GAAQC,EACV,EAAKoB,SAAS,CACZnB,YAAagB,EAAKI,KAAKC,KACvBvB,KAAMkB,EAAKtB,KACXK,QAASiB,EAAKM,IAAIvB,QAClBE,SAAUe,EAAKI,KAAKnB,SACpBC,YAAac,EAAKO,QAAQ,GAAGrB,YAC7BC,MAAO,KAGT,EAAKgB,SAAS,CACZnB,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,MAAO,gCA1BA,4C,kGA8Bb,WACE,OACE,qBAAKN,UAAU,OAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAML,WAAYgC,KAAKhC,aACvB,cAAC,EAAD,CACEQ,YAAawB,KAAKlB,MAAMN,YACxBF,KAAM0B,KAAKlB,MAAMR,KACjBC,QAASyB,KAAKlB,MAAMP,QACpBE,SAAUuB,KAAKlB,MAAML,SACrBC,YAAasB,KAAKlB,MAAMJ,YACxBC,MAAOqB,KAAKlB,MAAMH,iB,GAnDZsB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cdfa04f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.getWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n      <button>Get Weather</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Weather.css\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"info\">\r\n      {props.city && (\r\n        <p className=\"info-key\">\r\n          City : <span className=\"info-value\">{props.city}</span>\r\n        </p>\r\n      )}\r\n      {props.country && (\r\n        <p className=\"info-key\">\r\n          Country : <span className=\"info-value\">{props.country}</span>\r\n        </p>\r\n      )}\r\n      {props.tempreature && (\r\n        <p className=\"info-key\">\r\n          Temperature : <span className=\"info-value\">{props.tempreature}</span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p className=\"info-key\">\r\n          Humidity : <span className=\"info-value\">{props.humidity}</span>\r\n        </p>\r\n      )}\r\n      {props.description && (\r\n        <p className=\"info-key\">\r\n          Description : <span className=\"info-value\">{props.description}</span>\r\n        </p>\r\n      )}\r\n      {props.error && (\r\n        <p className=\"info-key\">\r\n          Error : <span className=\"info-value\">{props.error}</span>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport Form from \"./components/Form/Form\";\nimport Weather from \"./components/Weather/Weather\";\n\nconst API_KEY = \"43f6ead6611327d30cc7fe81b124f617\";\n//http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n  state = {\n    tempreature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  };\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}%2C,${country}&appid=${API_KEY}`\n    );\n\n    const data = await api.json();\n    console.log(data);\n    if (city && country) {\n      this.setState({\n        tempreature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        tempreature: \"\",\n        city: \"\",\n        country: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please Enter City & Country\",\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"form-container\">\n          <Form getWeather={this.getWeather} />\n          <Weather\n            tempreature={this.state.tempreature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}